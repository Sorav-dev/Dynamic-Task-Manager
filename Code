<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Task Manager</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            justify-content: center;
            align-items: center;
            padding: 20px;
        }

        .container {
            background: rgba(255, 255, 255, 0.95);
            backdrop-filter: blur(10px);
            border-radius: 20px;
            box-shadow: 0 20px 60px rgba(0, 0, 0, 0.3);
            width: 100%;
            max-width: 500px;
            padding: 40px;
            animation: slideIn 0.5s ease-out;
        }

        @keyframes slideIn {
            from {
                opacity: 0;
                transform: translateY(-30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        h1 {
            color: #333;
            margin-bottom: 30px;
            text-align: center;
            font-size: 2.5em;
            background: linear-gradient(135deg, #667eea, #764ba2);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .input-group {
            display: flex;
            gap: 10px;
            margin-bottom: 30px;
        }

        #taskInput {
            flex: 1;
            padding: 15px 20px;
            border: 2px solid #e0e0e0;
            border-radius: 50px;
            font-size: 16px;
            transition: all 0.3s ease;
            outline: none;
        }

        #taskInput:focus {
            border-color: #667eea;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(102, 126, 234, 0.2);
        }

        #addBtn {
            padding: 15px 30px;
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
            border: none;
            border-radius: 50px;
            font-size: 16px;
            font-weight: bold;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px rgba(102, 126, 234, 0.3);
        }

        #addBtn:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px rgba(102, 126, 234, 0.4);
        }

        #addBtn:active {
            transform: translateY(0);
        }

        .filter-buttons {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            justify-content: center;
        }

        .filter-btn {
            padding: 8px 16px;
            background: #f0f0f0;
            border: none;
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            font-size: 14px;
        }

        .filter-btn.active {
            background: linear-gradient(135deg, #667eea, #764ba2);
            color: white;
        }

        .stats {
            display: flex;
            justify-content: space-around;
            padding: 15px;
            background: linear-gradient(135deg, rgba(102, 126, 234, 0.1), rgba(118, 75, 162, 0.1));
            border-radius: 15px;
            margin-bottom: 20px;
        }

        .stat {
            text-align: center;
        }

        .stat-value {
            font-size: 24px;
            font-weight: bold;
            color: #667eea;
        }

        .stat-label {
            font-size: 12px;
            color: #666;
            margin-top: 5px;
        }

        #taskList {
            list-style: none;
            max-height: 400px;
            overflow-y: auto;
        }

        .task-item {
            background: white;
            padding: 15px 20px;
            margin-bottom: 10px;
            border-radius: 15px;
            display: flex;
            align-items: center;
            gap: 15px;
            cursor: pointer;
            transition: all 0.3s ease;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
            animation: fadeIn 0.3s ease-out;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateX(-20px);
            }
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }

        .task-item:hover {
            transform: translateX(5px);
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1);
        }

        .task-item.completed {
            opacity: 0.7;
            background: #f8f8f8;
        }

        .task-item.completed .task-text {
            text-decoration: line-through;
            color: #999;
        }

        .checkbox {
            width: 20px;
            height: 20px;
            border: 2px solid #667eea;
            border-radius: 50%;
            cursor: pointer;
            transition: all 0.3s ease;
            flex-shrink: 0;
        }

        .checkbox.checked {
            background: linear-gradient(135deg, #667eea, #764ba2);
            position: relative;
        }

        .checkbox.checked::after {
            content: '✓';
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            color: white;
            font-size: 12px;
        }

        .task-text {
            flex: 1;
            font-size: 16px;
            color: #333;
        }

        .delete-btn {
            background: #ff4757;
            color: white;
            border: none;
            padding: 8px 15px;
            border-radius: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
            opacity: 0.8;
        }

        .delete-btn:hover {
            opacity: 1;
            transform: scale(1.05);
        }

        .empty-state {
            text-align: center;
            padding: 40px;
            color: #999;
        }

        .empty-state svg {
            width: 100px;
            height: 100px;
            margin-bottom: 20px;
            opacity: 0.5;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>✨ Task Manager</h1>
        
        <div class="input-group">
            <input type="text" id="taskInput" placeholder="What needs to be done?">
            <button id="addBtn">Add</button>
        </div>

        <div class="filter-buttons">
            <button class="filter-btn active" data-filter="all">All</button>
            <button class="filter-btn" data-filter="active">Active</button>
            <button class="filter-btn" data-filter="completed">Completed</button>
        </div>

        <div class="stats">
            <div class="stat">
                <div class="stat-value" id="totalTasks">0</div>
                <div class="stat-label">Total Tasks</div>
            </div>
            <div class="stat">
                <div class="stat-value" id="activeTasks">0</div>
                <div class="stat-label">Active</div>
            </div>
            <div class="stat">
                <div class="stat-value" id="completedTasks">0</div>
                <div class="stat-label">Completed</div>
            </div>
        </div>

        <ul id="taskList"></ul>

        <div class="empty-state" id="emptyState">
            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M9 11l3 3L22 4"></path>
                <path d="M21 12v7a2 2 0 01-2 2H5a2 2 0 01-2-2V5a2 2 0 012-2h11"></path>
            </svg>
            <p>No tasks yet. Add one above!</p>
        </div>
    </div>

    <script>
        // In-memory storage (instead of localStorage)
        let tasks = [];
        let currentFilter = 'all';
        let taskIdCounter = 1;

        // DOM elements
        const taskInput = document.getElementById('taskInput');
        const addBtn = document.getElementById('addBtn');
        const taskList = document.getElementById('taskList');
        const emptyState = document.getElementById('emptyState');
        const filterButtons = document.querySelectorAll('.filter-btn');

        // Initialize
        function init() {
            renderTasks();
            updateStats();
            
            // Event listeners
            addBtn.addEventListener('click', addTask);
            taskInput.addEventListener('keypress', (e) => {
                if (e.key === 'Enter') addTask();
            });
            
            filterButtons.forEach(btn => {
                btn.addEventListener('click', () => {
                    filterButtons.forEach(b => b.classList.remove('active'));
                    btn.classList.add('active');
                    currentFilter = btn.dataset.filter;
                    renderTasks();
                });
            });
        }

        // Add new task
        function addTask() {
            const text = taskInput.value.trim();
            if (!text) return;
            
            const task = {
                id: taskIdCounter++,
                text: text,
                completed: false,
                createdAt: new Date().toISOString()
            };
            
            tasks.unshift(task);
            taskInput.value = '';
            renderTasks();
            updateStats();
            
            // Animate input
            taskInput.style.transform = 'scale(0.95)';
            setTimeout(() => {
                taskInput.style.transform = 'scale(1)';
            }, 100);
        }

        // Render tasks
        function renderTasks() {
            const filteredTasks = tasks.filter(task => {
                if (currentFilter === 'all') return true;
                if (currentFilter === 'active') return !task.completed;
                if (currentFilter === 'completed') return task.completed;
            });
            
            if (filteredTasks.length === 0) {
                taskList.style.display = 'none';
                emptyState.style.display = 'block';
            } else {
                taskList.style.display = 'block';
                emptyState.style.display = 'none';
                
                taskList.innerHTML = filteredTasks.map(task => `
                    <li class="task-item ${task.completed ? 'completed' : ''}" data-id="${task.id}">
                        <div class="checkbox ${task.completed ? 'checked' : ''}" onclick="toggleTask(${task.id})"></div>
                        <span class="task-text">${escapeHtml(task.text)}</span>
                        <button class="delete-btn" onclick="deleteTask(${task.id}, event)">Delete</button>
                    </li>
                `).join('');
            }
        }

        // Toggle task completion
        function toggleTask(id) {
            const task = tasks.find(t => t.id === id);
            if (task) {
                task.completed = !task.completed;
                renderTasks();
                updateStats();
            }
        }

        // Delete task
        function deleteTask(id, event) {
            event.stopPropagation();
            const taskEl = event.target.closest('.task-item');
            
            // Animate removal
            taskEl.style.transform = 'translateX(100%)';
            taskEl.style.opacity = '0';
            
            setTimeout(() => {
                tasks = tasks.filter(t => t.id !== id);
                renderTasks();
                updateStats();
            }, 300);
        }

        // Update statistics
        function updateStats() {
            const total = tasks.length;
            const completed = tasks.filter(t => t.completed).length;
            const active = total - completed;
            
            document.getElementById('totalTasks').textContent = total;
            document.getElementById('activeTasks').textContent = active;
            document.getElementById('completedTasks').textContent = completed;
        }

        // Escape HTML to prevent XSS
        function escapeHtml(text) {
            const div = document.createElement('div');
            div.textContent = text;
            return div.innerHTML;
        }

        // Start the app
        init();
    </script>
</body>
</html>
